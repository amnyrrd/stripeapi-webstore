{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport userActionTypes from './user-types';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/Firebase.utils';\nimport { signUpSuccess, signUpFailure, signInSuccess, signInFailure, signOutSuccess, signOutFailure } from './user-actions';\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signUpSuccess({\n      userAuth: u\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    put(signInFailure(error));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(userActionTypes.CHECK_USER_SECTION, isUserAuthenticated);\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* onSignOutStart() {\n  yield takeLatest(userActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart)]);\n}","map":{"version":3,"sources":["/Users/aaronminyard/Development/code/2020-react-course/ecommerce-project/src/redux/user/user-sagas.js"],"names":["takeLatest","put","all","call","userActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","signUpSuccess","signUpFailure","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUp","payload","email","password","displayName","user","createUserWithEmailAndPassword","userAuth","u","error","getSnapshotFromUserAuth","userRef","userSnapshot","get","id","data","signInWithGoogle","signInWithPopup","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","signInWithEmailAndPassword","onEmailSignInStart","EMAIL_SIGN_IN_START","isUserAuthenticated","onCheckUserSession","CHECK_USER_SECTION","signOut","onSignOutStart","SIGN_OUT_START","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SACEC,IADF,EAEEC,cAFF,EAGEC,yBAHF,EAIEC,cAJF,QAKO,+BALP;AAMA,SAASC,aAAT,EAAwBC,aAAxB,EAAuCC,aAAvC,EAAsDC,aAAtD,EAAqEC,cAArE,EAAqFC,cAArF,QAA2G,gBAA3G;AAEA,OAAO,UAAUC,MAAV,CAAiB;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA;AAAnB;AAAX,CAAjB,EAA+D;AACpE,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMf,IAAI,CAACgB,8BAAL,CACrBJ,KADqB,EAErBC,QAFqB,CAAvB;AAIA,UAAMjB,GAAG,CAACQ,aAAa,CAAC;AAAEa,MAAAA,QAAQ,EAAEC;AAAZ,KAAD,CAAd,CAAT;AACD,GAND,CAME,OAAOC,KAAP,EAAc;AACd,UAAMvB,GAAG,CAACS,aAAa,CAACc,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUC,uBAAV,CAAkCH,QAAlC,EAA4C;AACjD,MAAI;AACF,UAAMI,OAAO,GAAG,MAAMvB,IAAI,CAACI,yBAAD,EAA4Be,QAA5B,CAA1B;AACA,UAAMK,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAM3B,GAAG,CAACU,aAAa,CAAC;AAAEkB,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CAAd,CAAT;AACD,GAJD,CAIE,OAAON,KAAP,EAAc;AACd,UAAMvB,GAAG,CAACW,aAAa,CAACY,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUO,gBAAV,GAA6B;AAClC,MAAI;AACF,UAAM;AAAEX,MAAAA;AAAF,QAAW,MAAMf,IAAI,CAAC2B,eAAL,CAAqB1B,cAArB,CAAvB;AACA,UAAMmB,uBAAuB,CAACL,IAAD,CAA7B;AACD,GAHD,CAGE,OAAOI,KAAP,EAAc;AACd,UAAMvB,GAAG,CAACW,aAAa,CAACY,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUS,mBAAV,GAAgC;AACrC,QAAMjC,UAAU,CAACI,eAAe,CAAC8B,oBAAjB,EAAuCH,gBAAvC,CAAhB;AACD;AAED,OAAO,UAAUI,eAAV,CAA0B;AAAEnB,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA4D;AACjE,MAAI;AACF,UAAM;AAAEE,MAAAA;AAAF,QAAW,MAAMf,IAAI,CAAC+B,0BAAL,CAAgCnB,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMO,uBAAuB,CAACL,IAAD,CAA7B;AACD,GAHD,CAGE,OAAOI,KAAP,EAAc;AACdvB,IAAAA,GAAG,CAACW,aAAa,CAACY,KAAD,CAAd,CAAH;AACD;AACF;AAED,OAAO,UAAUa,kBAAV,GAA+B;AACpC,QAAMrC,UAAU,CAACI,eAAe,CAACkC,mBAAjB,EAAsCH,eAAtC,CAAhB;AACD;AAED,OAAO,UAAUI,mBAAV,GAAgC;AACrC,MAAI;AACF,UAAMjB,QAAQ,GAAG,MAAMd,cAAc,EAArC;AACA,QAAI,CAACc,QAAL,EAAe;AACf,UAAMG,uBAAuB,CAACH,QAAD,CAA7B;AACD,GAJD,CAIE,OAAOE,KAAP,EAAc;AACd,UAAMvB,GAAG,CAACW,aAAa,CAACY,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUgB,kBAAV,GAA+B;AACpC,QAAMxC,UAAU,CAACI,eAAe,CAACqC,kBAAjB,EAAqCF,mBAArC,CAAhB;AACD;AAED,OAAO,UAAUG,OAAV,GAAoB;AACzB,MAAI;AACF,UAAMrC,IAAI,CAACqC,OAAL,EAAN;AACA,UAAMzC,GAAG,CAACY,cAAc,EAAf,CAAT;AACD,GAHD,CAGE,OAAOW,KAAP,EAAc;AACd,UAAMvB,GAAG,CAACa,cAAc,CAACU,KAAD,CAAf,CAAT;AACD;AACF;AAED,OAAO,UAAUmB,cAAV,GAA2B;AAChC,QAAM3C,UAAU,CAACI,eAAe,CAACwC,cAAjB,EAAiCF,OAAjC,CAAhB;AACD;AAED,OAAO,UAAUG,SAAV,GAAsB;AAC3B,QAAM3C,GAAG,CAAC,CACRC,IAAI,CAAC8B,mBAAD,CADI,EAER9B,IAAI,CAACkC,kBAAD,CAFI,EAGRlC,IAAI,CAACqC,kBAAD,CAHI,EAIRrC,IAAI,CAACwC,cAAD,CAJI,CAAD,CAAT;AAMD","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport userActionTypes from './user-types';\nimport {\n  auth,\n  googleProvider,\n  createUserProfileDocument,\n  getCurrentUser\n} from '../../firebase/Firebase.utils';\nimport { signUpSuccess, signUpFailure, signInSuccess, signInFailure, signOutSuccess, signOutFailure } from './user-actions';\n\nexport function* signUp({ payload: { email, password, displayName }}) {\n  try {\n    const { user } = yield auth.createUserWithEmailAndPassword(\n      email,\n      password\n    );\n    yield put(signUpSuccess({ userAuth: u}))\n  } catch (error) {\n    yield put(signUpFailure(error))\n  }\n}\n\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* signInWithGoogle() {\n  try {\n    const { user } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    put(signInFailure(error));\n  }\n}\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error))\n  }\n}\n\nexport function* onCheckUserSession() {\n  yield takeLatest(userActionTypes.CHECK_USER_SECTION, isUserAuthenticated)\n}\n\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess())\n  } catch (error) {\n    yield put(signOutFailure(error))\n  }\n}\n\nexport function* onSignOutStart() {\n  yield takeLatest(userActionTypes.SIGN_OUT_START, signOut)\n}\n\nexport function* userSagas() {\n  yield all([\n    call(onGoogleSignInStart), \n    call(onEmailSignInStart), \n    call(onCheckUserSession), \n    call(onSignOutStart)\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}