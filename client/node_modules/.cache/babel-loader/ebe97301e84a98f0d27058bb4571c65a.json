{"ast":null,"code":"import ShopActionTypes from './shop-types';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/Firebase.utils';\nexport const fetchCollectionsStart = collectionsMap => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n});\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    const collectionRef = firestore.collection('collections');\n    dispatch(fetchCollectionsStart());\n    collectionRef.get().then(snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      this.setState({\n        loading: false\n      });\n    });\n  };\n};\nexport const fetchCollectionsSuccess = collectionsMap;","map":{"version":3,"sources":["/Users/aaronminyard/Development/code/2020-react-course/ecommerce-project/src/redux/shop/shop-actions.js"],"names":["ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStart","collectionsMap","type","FETCH_COLLECTIONS_START","fetchCollectionsStartAsync","dispatch","collectionRef","collection","get","then","snapshot","setState","loading","fetchCollectionsSuccess"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AACA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAEA,OAAO,MAAMC,qBAAqB,GAAIC,cAAD,KAAqB;AACxDC,EAAAA,IAAI,EAAEL,eAAe,CAACM;AADkC,CAArB,CAA9B;AAIP,OAAO,MAAMC,0BAA0B,GAAG,MAAM;AAC9C,SAAQC,QAAD,IAAc;AACnB,UAAMC,aAAa,GAAGR,SAAS,CAACS,UAAV,CAAqB,aAArB,CAAtB;AACAF,IAAAA,QAAQ,CAACL,qBAAqB,EAAtB,CAAR;AACAM,IAAAA,aAAa,CAACE,GAAd,GAAoBC,IAApB,CAA0BC,QAAD,IAAc;AACrC,YAAMT,cAAc,GAAGF,+BAA+B,CAACW,QAAD,CAAtD;AACA,WAAKC,QAAL,CAAc;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAd;AACD,KAHD;AAID,GAPD;AAQD,CATM;AAWP,OAAO,MAAMC,uBAAuB,GAAGZ,cAAhC","sourcesContent":["import ShopActionTypes from './shop-types';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/Firebase.utils';\n\nexport const fetchCollectionsStart = (collectionsMap) => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START,\n});\n\nexport const fetchCollectionsStartAsync = () => {\n  return (dispatch) => {\n    const collectionRef = firestore.collection('collections');\n    dispatch(fetchCollectionsStart())\n    collectionRef.get().then((snapshot) => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      this.setState({ loading: false });\n    });\n  };\n};\n\nexport const fetchCollectionsSuccess = collectionsMap "]},"metadata":{},"sourceType":"module"}